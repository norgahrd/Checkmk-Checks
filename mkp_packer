#!/usr/bin/env python3
"""
 Simple Packer and unpacker for MKP Files
 MKP is the Package format for Check_MK
"""
import sys
import io
import json
import tarfile
import ast
from datetime import datetime
import os


def usage():
    """
    Print Usage and Exit
    """
    print("Pack and unpack Check_MK MKP Files")
    print("./mkp_packer OPERATION  PACKAGENAME")
    print()
    print("OPERATIONS:")
    print(" - pack (Create MKP File in cmk 2.3 Style)")
    print()
    print("PACKAGENAME:")
    print(" - e.g. namexy is  ./namexy/src")


def get_tar_info(name, obj):
    """
    Helper for Tarinfo Creation
    """
    tar_info = tarfile.TarInfo(name)
    tar_info.size = obj.getbuffer().nbytes
    tar_info.mtime = datetime.now().timestamp()
    tar_info.uid = 0
    tar_info.gid = 0
    tar_info.mode = 0o644
    return tar_info


def _file_filter(tarinfo):
    """
    Exclude Files from Tar
    """
    excludes = ['__pycache__', '__init__']
    for exclude in excludes:
        if exclude in tarinfo.name:
            return None
    return tarinfo



def pack_suptar(path, folder_name, files):
    """
    Helper to create the suptar
    """
    sub_filename = folder_name + ".tar"
    sub_obj = io.BytesIO()
    path = (
        path
        if folder_name == "cmk_addons_plugins"
        and not os.path.exists(f"{path}/cmk_addons_plugins")
        else f"{path}/{folder_name}"
    )
    with tarfile.open(sub_filename, "w:", fileobj=sub_obj) as subtar:
        for file in files:
            subtar.add(f"{path}/{file}", file, filter=_file_filter)

    sub_obj.seek(0)
    tar_info = get_tar_info(sub_filename, sub_obj)
    return sub_obj, tar_info

def pack(package_name):
    """
    Pack a MKP File for Checkmk Version 2.3
    """
    path = f"{package_name}/src/"

    #Create  info:
    info_dict = ast.literal_eval(open(path+"/info", encoding='utf-8').read())
    info_json = json.dumps(info_dict).encode('utf-8')

    #Pack Subfolders
    mkp_filename = package_name+f"/{info_dict['name']}-{info_dict['version']}.mkp"
    with tarfile.open(mkp_filename, "w:gz") as tar:
        tar.add(path+'/info', 'info')

        info_obj = io.BytesIO()
        info_obj.write(info_json)
        info_obj.seek(0)
        tar_info = get_tar_info('info.json', info_obj)
        tar.addfile(tar_info, info_obj)

        # New part:
        for folder_name, files in info_dict['files'].items():
            if (info_dict['files'][folder_name]):
                sub_obj, tar_info = pack_subtar(path, folder_name, files)
                tar.addfile(tar_info, sub_obj)
def unpack(mkp_path):
    """
    Unpack a MKP File for Checkmk Version 2.3
    """
    mkp_filename = mkp_path.split('/')[-1]  # Get the last part of the path
    package_name = mkp_filename.rsplit('-')[0]
    src_path = f"{package_name}/src"
    if os.path.exists(src_path):
        for root, dirs, files in os.walk(src_path, topdown=False):
            for file in files:
                os.remove(os.path.join(root, file))
            for dir in dirs:
                os.rmdir(os.path.join(root, dir))
    with tarfile.open(mkp_path, "r:gz") as tar:
        members = tar.getmembers()
        files_in_memory = {}
        for member in members:
            if member.isfile():
                file_obj = tar.extractfile(member)
                content = file_obj.read() if file_obj else None
                if not member.name.endswith('.tar'):
                    # Save non-tar files directly to disk
                    output_path = f"{package_name}/src/{member.name}"
                    os.makedirs(os.path.dirname(output_path), exist_ok=True)
                    with open(output_path, "wb") as f:
                        if content:
                            f.write(content)
                else:
                    files_in_memory[member.name] = content

        # Extract suptars from memory
        for name, content in files_in_memory.items():
            if name.endswith('.tar'):
                print(f"Starting with: {name}")
                subtar_bytes = io.BytesIO(content)
                plugin_name = name.split('.')[0]
                # Determine subfolder name
                subfolder = plugin_name if plugin_name != "cmk_addons_plugins" else ""
                with tarfile.open(fileobj=subtar_bytes, mode="r:") as subtar:
                    subtar_members = subtar.getmembers()
                    # Extract files from the subtar archive into memory
                    extracted_files = {}
                    for m in subtar_members:
                        # Prepend subfolder if needed
                        output_path = f"{package_name}/src/{subfolder}/{m.name}" if subfolder else f"{package_name}/src/{m.name}"
                        if m.isdir():
                            print(" - Creating directory:", output_path)
                            os.makedirs(output_path, exist_ok=True)
                        elif m.isfile():
                            print(" - Extracting file:", output_path)
                            file_obj = subtar.extractfile(m)
                            extracted_files[m.name] = file_obj.read() if file_obj else None
                            os.makedirs(os.path.dirname(output_path), exist_ok=True)
                            with open(output_path, "wb") as f:
                                if extracted_files[m.name]:
                                    f.write(extracted_files[m.name])

    print(f"Unpacked {mkp_filename} to {package_name}")

if __name__ == "__main__":
    if len(sys.argv) < 3:
        usage()
        sys.exit(1)

    OPERATION = sys.argv[1].lower()
    # beware of empty name, since we add /src as path
    NAME = sys.argv[2].lower()
    if OPERATION == "pack":
        pack(NAME)
    elif OPERATION == "unpack":
        unpack(NAME)
    else:
        usage()
        sys.exit(1)
